{"title":"實時渲染 延遲渲染 Deferred Rendering","uid":"a896efca63e04f8beb46d5e9142b43a4","slug":"GraphicQuest/GQ010 實時渲染2 延遲渲染 Deferred Rendering","date":"2022-12-15T02:51:05.862Z","updated":"2022-12-14T16:27:40.235Z","comments":true,"path":"api/articles/GraphicQuest/GQ010 實時渲染2 延遲渲染 Deferred Rendering.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1048887478377005126/ANIME-PICTURES.NET_-_694178-2439x3421-original-tiv-single-tallimage-lookingatviewer-blush.png","content":"<h1 id=\"延遲渲染-Deferred-Rendering\"><a href=\"#延遲渲染-Deferred-Rendering\" class=\"headerlink\" title=\"延遲渲染 Deferred Rendering\"></a>延遲渲染 Deferred Rendering</h1><h1 id=\"1-1-甚麼是延遲渲染？\"><a href=\"#1-1-甚麼是延遲渲染？\" class=\"headerlink\" title=\"1.1 甚麼是延遲渲染？\"></a>1.1 甚麼是延遲渲染？</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>　A single rendering pass could generate a color image in one target, object identifiers in another, and world-space distances in a third. This ability has also given rise to a different type of rendering pipeline, called Deferred shading, where visibility and shading are done in separate passes</p></blockquote>\n<p>甚麼是延遲渲染？為什麼要延遲渲染？</p>\n<p>假設一個場景中，有10000個Mesh需要渲染，有100個Light，</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 示例\nint main()\n&#123;\n    for (int i &#x3D; 0; i &lt; 10000;++i)\n    &#123;\n        for (int j &#x3D; 0; j &lt; 100;++j)\n        &#123;\n            RenderMesh(Mesh,Light)\n        &#125;\n    &#125;\n&#125;\n\nvoid RenderMesh(int Mesh,int Light)\n&#123;\n    for (int i &#x3D; 0; i &lt; Mesh * 3;++i)\n    &#123;\n        RenderTriange(Light);\n    &#125;\n&#125;</code></pre>\n<p>在一個正常的場景，涉及的Mesh可能有上百萬個，如果此時我們還想要去渲染100個Light互相影響的結構，不就相當於把這幾百萬個Mesh再重新渲染100次？就算是RTX4090也hold不住</p>\n<p>所以延遲渲染的做法就是先做深度測試(Depth Test)，再做渲染</p>\n<h1 id=\"2-1-延遲渲染的過程\"><a href=\"#2-1-延遲渲染的過程\" class=\"headerlink\" title=\"2.1 延遲渲染的過程\"></a>2.1 延遲渲染的過程</h1><h2 id=\"2-1-1-Geometry-Pass-幾何處理階段\"><a href=\"#2-1-1-Geometry-Pass-幾何處理階段\" class=\"headerlink\" title=\"2.1.1 Geometry Pass(幾何處理階段):\"></a>2.1.1 Geometry Pass(幾何處理階段):</h2><ul>\n<li>正常的渲染過程，只是我們不做光照處理。做深度測試，我們把在屏幕中所看見的場景中各種幾何信息暫存起來，我們叫這個暫存的地方叫 G-buffer</li>\n<li>G-buffer放甚麼幾何信息?你可以放:<ul>\n<li>Position (像素位置)</li>\n<li>Normals (光線)</li>\n<li>Diffuse Albedo RGB (漫反射)</li>\n<li>Spec-Power (高光反射)</li>\n<li>Spec-Intersity</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/project/pic/367b8335a4aa1ffa2d1718506cd6f0e7.jpg\"><br><img src=\"/project/pic/7d9a5a8be478fa7408bba69849a72c85.jpg\"></p>\n<h2 id=\"2-1-2-Lighting-Pass-光照處理階段\"><a href=\"#2-1-2-Lighting-Pass-光照處理階段\" class=\"headerlink\" title=\"2.1.2 Lighting Pass(光照處理階段):\"></a>2.1.2 Lighting Pass(光照處理階段):</h2><ul>\n<li>在這個階段，我們只需要渲染一個屏幕大小圖像就可以了</li>\n<li>在G-buffer中，我們已經存好了屏幕上的幾何信息，因此第一步就是獲取我們剛剛暫存信息</li>\n<li>在此基礎上，再使用多渲染目標(Multiple Render Targets, MRT)技術，就可以完成所有的渲染目標<ul>\n<li>MRT: GPU硬件功能，它允許渲染管道一次將圖像渲染到多個渲染目標紋理</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/project/pic/5d5829f27c19b9f24046e64375a99071.jpg\"></p>\n<h1 id=\"3-1-延遲渲染的偽代碼\"><a href=\"#3-1-延遲渲染的偽代碼\" class=\"headerlink\" title=\"3.1 延遲渲染的偽代碼\"></a>3.1 延遲渲染的偽代碼</h1><p>方便理解其中的算法，這裡各種版本的延遲渣染算法的偽代碼</p>\n<ol>\n<li>通用版本的延遲著色算法偽代碼：<pre class=\"line-numbers language-none\"><code class=\"language-none\">For each object:\nRender to multiple targets\nFor each light:\nApply light as a 2D postprocess</code></pre></li>\n<li>一個通用版本的deferred shading過程描述：<pre class=\"line-numbers language-none\"><code class=\"language-none\">“Standard” deferred shading is a 2-stage process:\n\n(1) draw (opaque) geometry storing its attributes (i.e. position as depth, normals, albedo color, specular color and other material properties) in a number of full screen buffers (typically 3 or 4)\n\n(2) for each light source, draw its volume and accumulate lit surface color into final render target</code></pre></li>\n<li>兩個Pass的延遲著色算法偽代碼：<pre class=\"line-numbers language-none\"><code class=\"language-none\">Two-pass deferred shading algorithm\nPass 1: geometry pass\n- Write visible geometry information to G-buffer\nPass 2: shading pass\nFor each G-buffer sample, compute shading\n- Read G-buffer data for current sample\n- Accumulate contribution of all lights\n- Output final surface color</code></pre></li>\n<li>多光源的延遲渲染的偽代碼：<pre class=\"line-numbers language-none\"><code class=\"language-none\">Many-light deferred shading algorithm\nFor each light:\n- Generate&#x2F;bind shadow&#x2F;environment maps\n- Compute light’s contribution for each G-buffer sample:\nFor each G-buffer sample\n- Load G-buffer data\n- Evaluate light contribution (may be zero)\n- Accumulate contribution into frame-buffer</code></pre>\n可以將這裡的多光源計算過程理解為，對每個光源創建一個屏幕空間包圍矩形，然後用光照shader渲染這個矩形</li>\n</ol>\n<h1 id=\"4-1-延遲渲染-vs-正向渲染\"><a href=\"#4-1-延遲渲染-vs-正向渲染\" class=\"headerlink\" title=\"4.1 延遲渲染 vs 正向渲染\"></a>4.1 延遲渲染 vs 正向渲染</h1><p>這邊對正向渲染和延遲渲染的特性做一個對照列舉：</p>\n<h2 id=\"4-2-正向渲染\"><a href=\"#4-2-正向渲染\" class=\"headerlink\" title=\"4.2 正向渲染\"></a>4.2 正向渲染</h2><p>正向渲染（Forward Rendering），先執行著色計算，再執行深度測試。</p>\n<p>正向渲染渲染n個物體在m個光源下的著色，複雜度為O(n*m)次。</p>\n<p>Forward Rendering，光源數量對計算複雜度影響巨大，所以比較適合戶外這種光源較少的場景。</p>\n<p>Forward Rendering的核心偽代碼可以表示為：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">For each light:\n\tFor each object affected by the light: \n\t\tframebuffer +&#x3D; object * light</code></pre>\n<h2 id=\"4-3-正向渲染渲染管線\"><a href=\"#4-3-正向渲染渲染管線\" class=\"headerlink\" title=\"4.3 正向渲染渲染管線\"></a>4.3 正向渲染渲染管線</h2><p><img src=\"/project/pic/8fbd6ddfc4a777a3130dae8e0200686b.jpg\"></p>\n<h2 id=\"4-4-延遲渲染\"><a href=\"#4-4-延遲渲染\" class=\"headerlink\" title=\"4.4 延遲渲染\"></a>4.4 延遲渲染</h2><p>延遲渲染( Deferred Rendering)，先執行深度測試，再執行著色計算。</p>\n<p>延遲渲染渲染n個物體在m個光源下的著色，複雜度為O(n+m)次。</p>\n<p>Deferred Rendering 的最大的優勢就是將光源的數目和場景中物體的數目在復雜度層面上完全分開。也就是說場景中不管是一個三角形還是一百萬個三角形，最後的複雜度不會隨 光源數目變化而產生巨大變化。</p>\n<p>Deferred Rendering的核心偽代碼可以表示如下，上文已經貼出過，這邊再次貼出，方便對比：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">For each object: Render to multiple targets For each light: Apply light as a 2D postprocess</code></pre>\n<h2 id=\"4-5-延遲渲染渲染管線\"><a href=\"#4-5-延遲渲染渲染管線\" class=\"headerlink\" title=\"4.5 延遲渲染渲染管線\"></a>4.5 延遲渲染渲染管線</h2><p><img src=\"/project/pic/e87c28ee0474e48a59ef0fd39f24be8d.jpg\"></p>\n<h1 id=\"5-1-延遲渲染的優缺點分析\"><a href=\"#5-1-延遲渲染的優缺點分析\" class=\"headerlink\" title=\"5.1 延遲渲染的優缺點分析\"></a>5.1 延遲渲染的優缺點分析</h1><p>這裡列舉一下經典版本的延遲渲染的優缺點。</p>\n<h2 id=\"5-1-1延遲渲染的優點\"><a href=\"#5-1-1延遲渲染的優點\" class=\"headerlink\" title=\"5.1.1延遲渲染的優點\"></a>5.1.1延遲渲染的優點</h2><p>Deferred Rendering 的最大的優勢就是將光源的數目和場景中物體的數目在復雜度層面上完全分開。也就是說場景中不管是一個三角形還是一百萬個三角形，最後的複雜度不會隨光源數目變化而產生巨大變化。</p>\n<ul>\n<li>複雜度僅O(n+m)。</li>\n<li>只渲染可見的像素，節省計算量。</li>\n<li>用更少的shader。</li>\n<li>對後處理(post-processing)支持良好。</li>\n<li>在大量光源的場景優勢尤其明顯。</li>\n</ul>\n<h2 id=\"5-1-2-延遲渲染的缺點\"><a href=\"#5-1-2-延遲渲染的缺點\" class=\"headerlink\" title=\"5.1.2 延遲渲染的缺點\"></a>5.1.2 延遲渲染的缺點</h2><ul>\n<li>內存開銷較大。</li>\n<li>讀寫G-buffer的內存帶寬用量是性能瓶頸。</li>\n<li>對透明物體的渲染存在問題。在這點上需要結合正向渲染進行渲染。</li>\n<li>對多重採樣抗鋸齒（MultiSampling Anti-Aliasing, MSAA）的支持不友好，主要因為需要硬件開啟MRT。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>就是一般來說實時渲染都會用到Diffuse&#x2F;Specular或者Albeo&#x2F;Roughnee&#x2F;Metallic,以及其他數據（Normal，Depth），這樣會導致G-Buffer比較大，這也是為什麼到目前為止, 延遲渲染在手機平台都沒有成為主流的核心問題，同時也是VR不採用的主要問題，VR中要面對帶寬消耗x2的問題</p></blockquote>\n<h1 id=\"6-1-延遲渲染的改進\"><a href=\"#6-1-延遲渲染的改進\" class=\"headerlink\" title=\"6.1 延遲渲染的改進\"></a>6.1 延遲渲染的改進</h1><p>針對延遲渲染上述提到的缺點，下面簡單列舉一些降低 Deferred Rendering 存取帶寬的改進方案。最簡單也是最容易想到的就是將存取的 G-Buffer 數據結構最小化，這也就衍生出了 Light Pre-Pass（即Deferred Lighting） 方法。另一種方式是將多個光照組成一組，然後一起處理，這種方法衍生了 Tile-Based Deferred Rendering。</p>\n<p>也就是說，常見的兩種Deferred Rendering的改進是：</p>\n<ul>\n<li>延遲光照 Light Pre-Pass（Deferred Lighting）</li>\n<li>分塊延遲渲染 Tile-BasedDeferred Rendering</li>\n</ul>\n<h1 id=\"6-2-延遲光照-LightPre-Pass-x2F-Deferred-Lighting\"><a href=\"#6-2-延遲光照-LightPre-Pass-x2F-Deferred-Lighting\" class=\"headerlink\" title=\"6.2 延遲光照 LightPre-Pass &#x2F; Deferred Lighting\"></a>6.2 延遲光照 LightPre-Pass &#x2F; Deferred Lighting</h1><p>Light Pre-Pass即Deferred Lighting（延遲光照），旨在減少傳統Defferred Rendering使用G-buffer 時佔用的過多開銷（reduce G-buffer overhead）</p>\n<p>延遲光照的主要渲染分成4個階段：</p>\n<ol>\n<li>幾何階段，渲染非透明物體，保存幾何信息；</li>\n<li>光照階段，保存光照信息；</li>\n<li>Shading階段，再次渲染非透明物體，</li>\n<li>使用前向渲染半透明體。</li>\n</ol>\n<p>相對於延遲渲染，延遲光照所需的buff信息更少更輕量，且第三步開始都是前向渲染，可以對每個不同的幾何體使用不同的 shader 進行渲染，所以每個物體的材質屬性將有更多變化，而且延遲光照通常情況下可以使用MSAA (除一些新特性外)。</p>\n<p>延遲光照的具體思路：</p>\n<ol>\n<li><p>渲染場景中不透明（opaque ）的幾何體。將法線向量n和鏡面擴展因子（specular spread factor）m 寫入緩衝區。這個n&#x2F;m-buffer 緩衝區是一個類似 G-Buffer的緩衝區，但包含的信息更少，更輕量，適合於單個輸出顏色緩衝區，因此不需要MRT支持。</p>\n</li>\n<li><p>渲染光照。計算漫反射和鏡面著色方程，並將結果寫入不同的漫反射和鏡面反射累積緩衝區。這個過程可以在一個單獨的pass中完成（使用MRT），或者用兩個單獨的pass。環境光照明可以在這個階段使用一個 full-screen pass進行計算。</p>\n</li>\n<li><p>對場景中的不透明幾何體進行第二次渲染。從紋理中讀取漫反射和鏡面反射值，對前面步驟中漫反射和鏡面反射累積緩衝區的值進行調製，並將最終結果寫入最終的顏色緩衝區。若在上一階段沒有處理環境光照明，則在此階段應用環境光照明。</p>\n</li>\n</ol>\n<p>Light Pre-Pass 的優點:</p>\n<ul>\n<li>可以使用MSAA(多重採樣抗鋸齒)。由於使用了Z 值和 Normal 值，就可以很容易找到邊緣，並進行採樣</li>\n<li>解決了渲染透明物體的問題</li>\n<li>複雜度僅O(2n+m)。</li>\n</ul>\n<h1 id=\"7-1-分塊延遲渲染（Tile-Based-Deferred-Rendering）\"><a href=\"#7-1-分塊延遲渲染（Tile-Based-Deferred-Rendering）\" class=\"headerlink\" title=\"7.1 分塊延遲渲染（Tile-Based Deferred Rendering）\"></a>7.1 分塊延遲渲染（Tile-Based Deferred Rendering）</h1><p>分塊（tiled）渲染，目的是在計算光照前對光照進行裁剪，以提升場景中光源較多時的性能表現。分塊和分簇和其它延遲或者前向渲染技術能兼容得比較好，現在的商業和in house引擎也都在使用。</p>\n<p>延遲渲染的瓶頸在於讀寫 G-buffer，在大量光源下，具體瓶頸將位於每個光源對 G-buffer的讀取及與顏色緩衝區（color buffer）混合。這裡的問題是，每個光源，即使它們的影響範圍在屏幕空間上有重疉，因為每個光源是在不同的繪製中進行，所以會重複讀取G-buffer中相同位置的數據，計算後以相加混合方式寫入顏色緩衝。光源越多，內存帶寬用量越大。</p>\n<p>而分塊延遲渲染的主要思想則是把屏幕分拆成細小的柵格，例如每 32 × 32 像素作為一個分塊（tile）。</p>\n<p>然後，計算每個分塊會受到哪些光源影響，把那些光源的索引儲存在分塊的光源列表裡。</p>\n<p>最後，逐個分塊進行著色，對每像素讀取 G-buffer 和光源列表及相關的光源信息。</p>\n<p>因此，G-buffer的數據只會被讀取1次且僅1次，寫入 color buffer也是1次且僅1次，大幅降低內存帶寬用量。不過，這種方法需要計算光源會影響哪些分塊，這個計算又稱為光源剔除（light culling），可以在 CPU 或 GPU（通常以 compute shader 實現）中進行。</p>\n<p>用GPU計算的好處是，GPU 計算這類工作比 CPU 更快，也減少 CPU／GPU 數據傳輸。而且，可以計算每個分塊的深度範圍（depth range），作更有效的剔除。</p>\n<h1 id=\"8-1-實時渲染中常見的Rendering-Path總結\"><a href=\"#8-1-實時渲染中常見的Rendering-Path總結\" class=\"headerlink\" title=\"8.1 實時渲染中常見的Rendering Path總結\"></a>8.1 實時渲染中常見的Rendering Path總結</h1><p>實時渲染中常見的幾種 Rendering Path</p>\n<p>目前已經提到的Rendering Path有：</p>\n<ul>\n<li>正向渲染 （Forward Rendering）</li>\n<li>延遲渲染 （Deferred Rendering）</li>\n<li>延遲光照 （Light Pre-Pass &#x2F; Deferred Lighting）</li>\n<li>分塊延遲渲染（Tile-Based Deferred Rendering）</li>\n</ul>\n<p>除此之外，還有如下一些後來提出的Rendering Path比較有趣：</p>\n<ul>\n<li>Forward+（即Tiled Forward Rendering，分塊正向渲染）</li>\n<li>群組(分簇)渲染 Clustered Rendering</li>\n</ul>\n<p>以虛幻為例，虛幻的管線是普通版本的tiled deferred和forward+</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>(虚幻引擎中的前向着色渲染器)[<a href=\"https://docs.unrealengine.com/5.0/zh-CN/forward-shading-renderer-in-unreal-engine/]\">https://docs.unrealengine.com/5.0/zh-CN/forward-shading-renderer-in-unreal-engine/]</a></li>\n<li>(DX12渲染管线(3) - 分块&#x2F;分簇延迟渲染])[<a href=\"https://zhuanlan.zhihu.com/p/66884611]\">https://zhuanlan.zhihu.com/p/66884611]</a></li>\n<li>(TBDRっぽい何かを実装してみた)[<a href=\"https://qiita.com/Onbashira/items/f5905c2fc227733edb78#%E9%95%B7%E6%89%80]\">https://qiita.com/Onbashira/items/f5905c2fc227733edb78#%E9%95%B7%E6%89%80]</a></li>\n<li>(タイルベースポイントライトカリングでのタイルフラスタム計算メモ)[<a href=\"http://momose-d.cocolog-nifty.com/blog/2014/03/index.html]\">http://momose-d.cocolog-nifty.com/blog/2014/03/index.html]</a></li>\n<li>(【《Real-Time Rendering 3rd》 提炼总结】(七) 第七章续 · 延迟渲染(Deferred Rendering)的前生今世)[<a href=\"https://github.com/QianMo/Game-Programmer-Study-Notes/blob/master/Content/%E3%80%8AReal-Time%20Rendering%203rd%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Content/BlogPost07/README.md]\">https://github.com/QianMo/Game-Programmer-Study-Notes/blob/master/Content/%E3%80%8AReal-Time%20Rendering%203rd%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Content/BlogPost07/README.md]</a></li>\n</ul>\n","feature":null,"text":"延遲渲染 Deferred Rendering1.1 甚麼是延遲渲染？ A single rendering pass could generate a color image in one target, object identifiers in another, and w...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93-Deferred-Rendering\"><span class=\"toc-text\">延遲渲染 Deferred Rendering</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-1-%E7%94%9A%E9%BA%BC%E6%98%AF%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%EF%BC%9F\"><span class=\"toc-text\">1.1 甚麼是延遲渲染？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-1-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E9%81%8E%E7%A8%8B\"><span class=\"toc-text\">2.1 延遲渲染的過程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-1-Geometry-Pass-%E5%B9%BE%E4%BD%95%E8%99%95%E7%90%86%E9%9A%8E%E6%AE%B5\"><span class=\"toc-text\">2.1.1 Geometry Pass(幾何處理階段):</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-2-Lighting-Pass-%E5%85%89%E7%85%A7%E8%99%95%E7%90%86%E9%9A%8E%E6%AE%B5\"><span class=\"toc-text\">2.1.2 Lighting Pass(光照處理階段):</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-1-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E5%81%BD%E4%BB%A3%E7%A2%BC\"><span class=\"toc-text\">3.1 延遲渲染的偽代碼</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-1-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93-vs-%E6%AD%A3%E5%90%91%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">4.1 延遲渲染 vs 正向渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E6%AD%A3%E5%90%91%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">4.2 正向渲染</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E6%AD%A3%E5%90%91%E6%B8%B2%E6%9F%93%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%B7%9A\"><span class=\"toc-text\">4.3 正向渲染渲染管線</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">4.4 延遲渲染</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%B7%9A\"><span class=\"toc-text\">4.5 延遲渲染渲染管線</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-1-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E5%84%AA%E7%BC%BA%E9%BB%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5.1 延遲渲染的優缺點分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-1%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E5%84%AA%E9%BB%9E\"><span class=\"toc-text\">5.1.1延遲渲染的優點</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-2-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E7%BC%BA%E9%BB%9E\"><span class=\"toc-text\">5.1.2 延遲渲染的缺點</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-1-%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%E7%9A%84%E6%94%B9%E9%80%B2\"><span class=\"toc-text\">6.1 延遲渲染的改進</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-2-%E5%BB%B6%E9%81%B2%E5%85%89%E7%85%A7-LightPre-Pass-x2F-Deferred-Lighting\"><span class=\"toc-text\">6.2 延遲光照 LightPre-Pass &#x2F; Deferred Lighting</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-1-%E5%88%86%E5%A1%8A%E5%BB%B6%E9%81%B2%E6%B8%B2%E6%9F%93%EF%BC%88Tile-Based-Deferred-Rendering%EF%BC%89\"><span class=\"toc-text\">7.1 分塊延遲渲染（Tile-Based Deferred Rendering）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-1-%E5%AF%A6%E6%99%82%E6%B8%B2%E6%9F%93%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84Rendering-Path%E7%B8%BD%E7%B5%90\"><span class=\"toc-text\">8.1 實時渲染中常見的Rendering Path總結</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><span class=\"toc-text\">參考資料</span></a></li></ol>","author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"mapped":true,"prev_post":{"title":"實現Flowmap","uid":"791f4797b9f7bc6b1c27dbd08f25dd4c","slug":"GraphicQuest/GQ011 實現Flowmap","date":"2022-12-15T02:51:05.867Z","updated":"2022-12-14T14:53:23.944Z","comments":true,"path":"api/articles/GraphicQuest/GQ011 實現Flowmap.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1051508858461364335/asia_genshin___1638974304_abc02fc9_progressive.jpg","text":"1.實現Flowmap甚麼是Flowmap? 實際上可以理解成擁有流動材質的貼圖技術 實際流程 (簡單版): 下載Flowmap Painter, 地址 下載以後，軟件會自帶一張水貼圖，以及可調整的向量場界面，嘗試一下軟件功能，繪製 Flowmap 最後按下 “bake” 功能鍵...","link":"","photos":[],"count_time":{"symbolsCount":773,"symbolsTime":"1 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null},"next_post":{"title":"實時渲染 Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM","uid":"93a53427e5b87ad502fcef83077b7809","slug":"GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows","date":"2022-12-15T02:51:05.856Z","updated":"2022-12-14T14:55:11.082Z","comments":true,"path":"api/articles/GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1048640713115566141/FSeCV_LVcAEZNRM.jpg","text":"Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM1. Shadow Mapping (陰影映射)1.1 陰影映射算法流程Shadow Mapping 為圖像空間算法，用於快速判斷Shadow point 是否於陰影之中 好處: 不需要場景的...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null}}