{"title":"實時渲染 Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM","uid":"93a53427e5b87ad502fcef83077b7809","slug":"GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows","date":"2022-12-15T02:51:05.856Z","updated":"2022-12-14T14:55:11.082Z","comments":true,"path":"api/articles/GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1048640713115566141/FSeCV_LVcAEZNRM.jpg","content":"<h1 id=\"Shadow-Mapping、PCSS、VSSM、SDF-Shadows、VSM、MSM\"><a href=\"#Shadow-Mapping、PCSS、VSSM、SDF-Shadows、VSM、MSM\" class=\"headerlink\" title=\"Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM\"></a>Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM</h1><h2 id=\"1-Shadow-Mapping-陰影映射\"><a href=\"#1-Shadow-Mapping-陰影映射\" class=\"headerlink\" title=\"1. Shadow Mapping (陰影映射)\"></a>1. Shadow Mapping (陰影映射)</h2><h2 id=\"1-1-陰影映射算法流程\"><a href=\"#1-1-陰影映射算法流程\" class=\"headerlink\" title=\"1.1 陰影映射算法流程\"></a>1.1 陰影映射算法流程</h2><p>Shadow Mapping 為圖像空間算法，用於快速判斷Shadow point 是否於陰影之中</p>\n<ul>\n<li>好處: 不需要場景的幾何信息(只需屏幕信息)</li>\n<li>壞處: 存在自遮擋和走樣的問題<br>陰影映射算法分成兩步:</li>\n</ul>\n<ol>\n<li>以光源為視點，生成場景的深度圖(Shadow map)</li>\n<li>將著色點(Shadow point)到光源的距離和深度圖中的對應值作比較，判斷該點是否處位陰影之中</li>\n</ol>\n<p><img src=\"/project/pic/ShaderMap.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Shadow Mapping \n&#x2F;&#x2F; 計算有多少點不在陰影內 \nint noShadowCount &#x3D; 0;\n&#x2F;&#x2F; 深度圖中的對應值\nfloat closestDepth &#x3D; unpack(closestDepthVec);\n&#x2F;&#x2F; 著色點到光源距離\nfloat currentDepth &#x3D; coords.z;\nif(currentDepth &lt; closestDepth)&#123;\n    noShadowCount +&#x3D; 1;\n&#125;</code></pre>\n<h2 id=\"1-2-自遮擋問題\"><a href=\"#1-2-自遮擋問題\" class=\"headerlink\" title=\"1.2 自遮擋問題\"></a>1.2 自遮擋問題</h2><h2 id=\"甚麼是自遮擋\"><a href=\"#甚麼是自遮擋\" class=\"headerlink\" title=\"甚麼是自遮擋?\"></a>甚麼是自遮擋?</h2><p>在第一步生成的深度圖中，深度變化差可能比較大，但深度圖分辨率不夠，所以在生成的深度圖採樣的深度有誤差</p>\n<p>在第二步中，假設著色點在光源處上可以看見，但當計算著色點到光源距離時，會誤以為比從深度圖讀取的距離長( 著色點到光源距離 &gt; 深度圖讀取的距離 )，算法會認為這個點位於陰影之中，以為著色點在光源處上看不見。</p>\n<p><img src=\"/project/pic/%E8%87%AA%E9%81%AE%E6%93%8B.png\"></p>\n<h2 id=\"簡單的解決方法-偏倚-bias\"><a href=\"#簡單的解決方法-偏倚-bias\" class=\"headerlink\" title=\"簡單的解決方法 偏倚 bias\"></a>簡單的解決方法 偏倚 bias</h2><p>加入額外的變量bias作比較</p>\n<p>如果(著色點到光源距離 &lt; 深度圖讀取的距離 + bias)，有多少點不在陰影內 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; Shadow Mapping \n&#x2F;&#x2F; 計算有多少點不在陰影內 \nint noShadowCount &#x3D; 0;\n&#x2F;&#x2F; 深度圖中的對應值: closestDepthVec為深度圖\nfloat closestDepth &#x3D; unpack(closestDepthVec);\n&#x2F;&#x2F; 著色點到光源距離\nfloat currentDepth &#x3D; coords.z;\n&#x2F;&#x2F; 加入額外的變量作比較\nif(currentDepth &lt; closestDepth + 0.01)&#123;\n    noShadowCount +&#x3D; 1;\n&#125;</code></pre>\n\n<p><img src=\"/project/pic/biasimport.png\"></p>\n<h2 id=\"1-3-走樣問題-Aliasing\"><a href=\"#1-3-走樣問題-Aliasing\" class=\"headerlink\" title=\"1.3 走樣問題 Aliasing\"></a>1.3 走樣問題 Aliasing</h2><p>生成的陰影可能會呈現階梯狀，仍然是深度圖分辨率不足的問題<br><img src=\"/project/pic/bias.png\"></p>\n<h2 id=\"2-1-PCF-Percentage-Closer-Filtering-反走樣\"><a href=\"#2-1-PCF-Percentage-Closer-Filtering-反走樣\" class=\"headerlink\" title=\"2.1 PCF (Percentage Closer Filtering) 反走樣\"></a>2.1 PCF (Percentage Closer Filtering) 反走樣</h2><p>改善剛剛提及的階梯狀陰影問題</p>\n<h2 id=\"PCF流程\"><a href=\"#PCF流程\" class=\"headerlink\" title=\"PCF流程\"></a>PCF流程</h2><ol>\n<li><p>對於某一個著色點p，先計算該點在場景中與光源的距離 $D_{scene}(p)$</p>\n</li>\n<li><p>取濾波卷積核w，根據卷積核的呎吋，以p點為中心，取深度圖中附近區域內保存的深度信息 $D_{SM}(q), q \\in N(p)$</p>\n</li>\n<li><p>計算可見性判斷，並得出結果 $X^+[D_SM(q) - d_{scene}(p)]$</p>\n</li>\n<li><p>根據卷積核的權重w(p,q)，對結果進行加權平均，得到p點最終可見性結果</p>\n</li>\n</ol>\n<p>$$<br>V(p) &#x3D; \\sum_{q \\in N(p)}w(p,q) * X^{+}[D_{SM}(q) - d_{scene}(p)]<br>$$</p>\n<p>$$<br>X^{+}(n) &#x3D;<br>\\begin{aligned}<br>    1 &amp; &amp; n &gt; 0 \\<br>    0 &amp; &amp; n&lt;&#x3D;0<br>\\end{aligned}<br>$$</p>\n<p>假設已得到濾波卷積核w，那麼它的均值濾波(取平均值)為0.6667</p>\n<p>$$<br>w &#x3D; \\begin{bmatrix}<br>    1 &amp; 0 &amp; 1 \\<br>    1 &amp; 0 &amp; 0 \\<br>    1 &amp; 1 &amp; 1<br>\\end{bmatrix}, 6 &#x2F; 9 &#x3D; 0.6667<br>$$</p>\n<h2 id=\"2-2-PCF-在-GAMES202-homework-1-的-實現過程\"><a href=\"#2-2-PCF-在-GAMES202-homework-1-的-實現過程\" class=\"headerlink\" title=\"2.2 PCF 在 GAMES202 homework 1 的 實現過程\"></a>2.2 PCF 在 GAMES202 homework 1 的 實現過程</h2><ol>\n<li>需要完善 phongFragment.glsl 中的 PCF(sampler2D shadowMap, vec4<br>shadowCoord, float filterSize) 函数。我们推荐在一个圆盘滤波核中进行随机采样，采用这种方案的原因是可以简化后续PCSS Shader 的编写同时可以使软阴影上模糊的部分更显圆润自然，计算出来的伴影直径可与单位圆盘上的采样点相乘生成 ShadowMap 上的采样坐标</li>\n<li>（值得注意的是随机采样函数的质量将与最终渲染效果的好坏息息相关，我们在框架中提供了泊松圆盘采样和均匀圆盘采样两种采样函数，替换使用对比一下两种采样函数的细微区别，我们也鼓励使用其他的采样方法）。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 採樣點數量\n#define NUM_SAMPLES 20\nvec2 poissonDisk[NUM_SAMPLES];\nfloat PCF(sampler2D shadowMap, vec4 coords) \n&#123;\n  &#x2F;&#x2F; 泊松分佈採樣 （Poisson-Disk Sample）\n  &#x2F;&#x2F; 圓範圍內隨機取一系列坐標作為採樣點，但是這些坐標還需要滿足一定約束，即坐標與坐標之間至少有一定距離間隔\n  poissonDiskSamples(coords.xy);\n  &#x2F;&#x2F; 均勻圓盤分佈採樣（Uniform-Disk Sample）\n  &#x2F;&#x2F; 圓範圍內隨機取一系列坐標作為採樣點；看上去比較雜亂無章，採樣效果的 noise 比較嚴重。\n  &#x2F;&#x2F;uniformDiskSamples(coords.xy);\n\n  &#x2F;&#x2F; shadow map 的大小, 越大滤波的范围越小\n  float textureSize &#x3D; 400.0;\n  &#x2F;&#x2F; 濾波的波長\n  float filterStride &#x3D; 5.0;\n  &#x2F;&#x2F; 濾波窗口的範圍\n  float filterRange &#x3D; 1.0 &#x2F; textureSize * filterStride;\n  &#x2F;&#x2F; 計算有多少點不在陰影內\n  int noShadowCount &#x3D; 0;\n  for( int i &#x3D; 0; i &lt; NUM_SAMPLES; i ++ ) &#123;\n    vec2 sampleCoord &#x3D; poissonDisk[i] * filterRange + coords.xy;\n    vec4 closestDepthVec &#x3D; texture2D(shadowMap, sampleCoord); \n    float closestDepth &#x3D; unpack(closestDepthVec);\n    float currentDepth &#x3D; coords.z;\n    &#x2F;&#x2F; 簡單理解\n    &#x2F;&#x2F; float closestDepth &#x3D; unpack(texture2D(shadowMap,coords.xy+disk[i]*0.001).rgba);\n    if(currentDepth &lt; closestDepth + 0.01)&#123;\n      noShadowCount +&#x3D; 1;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 根據卷積核的權重w(p,q)，對結果進行加權平均\n  float shadow &#x3D; float(noShadowCount) &#x2F; float(NUM_SAMPLES);\n  return shadow;\n&#125;</code></pre>\n\n<p>效果圖<br><img src=\"/project/pic/pcf.png\"></p>\n<h2 id=\"LightMVP-使用\"><a href=\"#LightMVP-使用\" class=\"headerlink\" title=\"LightMVP 使用\"></a>LightMVP 使用</h2><details>\n\n<ol>\n<li>PhongMaterial.js的buildPhongMaterial()函數通過調用PhongMaterial</li>\n<li>ShadowMaterial.js的buildShadowMaterial()函數通過調用ShadowMaterial</li>\n<li>在ShadowMaterial中進行CalcLightMVP()</li>\n<li>計算過後在loadOBJ中結合定義的transform和scale賦值傳入material</li>\n</ol>\n</details>\n\n<h1 id=\"3-1-Soft-Shadow\"><a href=\"#3-1-Soft-Shadow\" class=\"headerlink\" title=\"3.1 Soft Shadow\"></a>3.1 Soft Shadow</h1><p>當面光源照射物體時，會在物體後面產生軟陰影（soft shadow）。軟陰影邊緣的柔和程度不固定，會隨著遮擋程度的變化而變化。</p>\n<p>雖然上一節介紹的 PCF 技術可以使陰影的邊緣變得柔和，但是單純地使用 PCF 並不能得到軟陰影，因為 PCF 濾波卷積核的尺寸固定，於是得到的陰影邊緣柔和程度也是固定的。</p>\n<p>要想得到軟陰影，可以在 PCF 的基礎上進一步發展，根據遮擋程度的變化而動態調整濾波卷積核的尺寸，使陰影邊緣的柔和程度隨著遮擋程度的變化而變化。</p>\n<h1 id=\"4-1-PCSS\"><a href=\"#4-1-PCSS\" class=\"headerlink\" title=\"4.1 PCSS\"></a>4.1 PCSS</h1><p>PCSS（Percentage Closer Soft Shadows）是一種在 PCF 的基礎上得到的軟陰影生成技術，它根據著色點和光源之間遮擋物的相對平均深度來判斷著色點的被遮擋程度，依此選擇合適的 PCF 濾波卷積核尺寸，使得陰影邊緣的柔和程度隨著遮擋程度的變化而變化。</p>\n<p><img src=\"/project/pic/pcss.png\" alt=\"PCSS 示意\"><br>PCSS 算法可分為三步：</p>\n<ol>\n<li>遮擋物搜索（blocker search）： 在深度圖上計算著色點附近給定區域的平均遮擋物深度 $d_{blocker}$ ； 這個搜索遮擋物區域的範圍可以是恆定的，例如固定為 $5*5$ ， 也可以使用啟發法（heuristics），根據光源的尺寸 $w_{light}$ 和著色點與光源之間的距離 $d_{receiver}$  確定搜索遮擋物區域的範圍；</li>\n<li>半影估計（penumbra estimation）： 假設光源、遮擋物和著色點所在表面相互平行，根據光源的尺寸 $w_{light}$ ，著色點與光源之間的距離 $d_{receiver}$ 和平均遮擋物深度$d_{blocker}$ 估計陰影在著色點處的柔和程度 $w_{penumbra} &#x3D; \\frac{d_{receiver} - d_{blocker}}{d_{blocker}}$ ；</li>\n<li>PCF：執行 PCF 算法，而 PCF 卷積核的尺寸和半影估計 $w_{penumbra}$ 成正比；</li>\n</ol>\n<h1 id=\"4-2-PCSS-在-GAMES202-homework-1-的-實現過程\"><a href=\"#4-2-PCSS-在-GAMES202-homework-1-的-實現過程\" class=\"headerlink\" title=\"4.2 PCSS 在 GAMES202 homework 1 的 實現過程\"></a>4.2 PCSS 在 GAMES202 homework 1 的 實現過程</h1><ol>\n<li>需要完善 phongFragment.glsl 中的 findBlocker(sampler2D shadowMap,vec2 uv, float zReceiver)。findBlocker 函数中需要完成对遮挡物平均深度的计算。</li>\n<li>需要完善 phongFragment.glsl 中的 PCSS(sampler2D shadowMap, vec4 shadowCoord) 函数</li>\n</ol>\n<p>詳細在 GAMES202 homework 1 的 實現過程</p>\n<details>\n\n<p>findBlocker(sampler2D shadowMap,vec2 uv, float zReceiver)函數實現</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">float findBlocker( sampler2D shadowMap,  vec2 uv, float zReceiver ) &#123;\n  int blockerNum &#x3D; 0;\n  float block_depth &#x3D; 0.;\n  float shadowmapSize &#x3D; 2048.;\n  float Stride &#x3D; 50.;\n\n  poissonDiskSamples(uv);\n  \n  for (int i &#x3D; 0; i &lt; NUM_SAMPLES;++i)\n  &#123;\n    vec4 shadow_color &#x3D; \n      texture2D(shadowMap,uv + poissonDisk[i] * Stride &#x2F; shadowmapSize);\n    float shadow_depth &#x3D; unpack(shadow_color);\n    if (zReceiver &gt; shadow_depth + 0.01)\n    &#123;\n      blockerNum++;\n      block_depth +&#x3D; shadow_depth;\n    &#125;\n  &#125;\n  if (blockerNum &#x3D;&#x3D; 0)\n    return 1.;\n  return float(block_depth) &#x2F; float(blockerNum);\n&#125;</code></pre>\n\n</details>\n\n\n<h1 id=\"5-1-VSSM\"><a href=\"#5-1-VSSM\" class=\"headerlink\" title=\"5.1 VSSM\"></a>5.1 VSSM</h1><p>PCSS 算法的第一步為了估計著色點平均遮擋物深度 $z_{occ}$ ，需要讀取深度圖中該點附近所有紋元（texel）保存的深度，並與著色點的深度進行比較，求取那些比著色點深度更小的紋元深度的平均值，而在第三步為了得到平均可見性結果，也要再次重複這個統計過程。</p>\n<p>VSSM（Variance Soft Shadow Mapping） 近似了這個統計過程，大大加速了 PCSS 第一步和第三步的估計。加速的統計過程可簡單地分為如下兩步：</p>\n<p>計算著色點附近深度分佈的均值和方差；<br>借助不等式估計該點附近未遮擋物的平均深度 $z_{occ}$ 或該點的可見性判斷結果 $V(p)$ ；</p>\n<h1 id=\"5-1-1-計算深度分佈的均值和方差\"><a href=\"#5-1-1-計算深度分佈的均值和方差\" class=\"headerlink\" title=\"5.1.1 計算深度分佈的均值和方差\"></a>5.1.1 計算深度分佈的均值和方差</h1><p>隨機變量 $X$ 的數學期望 $E(X)$ 和方差 $Var(X)$ 存在如下關係：</p>\n<p>$$<br>(1): Var(X) &#x3D; E(X^2) - E^2(X)<br>$$</p>\n<p>只需記錄下隨機變量 $X$ 的數學期望 $E(X)$ 和 2階原點矩 $E(X^2)$ ，便能得到隨機變量所服從概率分佈的均值和方差。於是，在生成深度圖時，不僅記錄場景的深度 $z$ ，也額外記錄場景深度的平方 $z^2$ ，然後計算各自的 SAT（summed area table）。(類似前綴和)</p>\n<p>指定著色點附近區域的查詢範圍後，根據深度 SAT 和深度平方 SAT，可以快速地獲取著色點附近深度的平均值 $(z^2)<em>{arg}$ 和深度平方的平均值 $(z</em>{arg})^2$ ，分別作為深度分佈的均值和  階原點矩，並根據公式(1) 得到了深度分佈的方差 $(z^2)<em>{arg}-(z</em>{arg})^2$</p>\n<h1 id=\"5-1-2-通過不等式估計未遮擋物的平均深度或著色點的可見性判斷結果\"><a href=\"#5-1-2-通過不等式估計未遮擋物的平均深度或著色點的可見性判斷結果\" class=\"headerlink\" title=\"5.1.2 通過不等式估計未遮擋物的平均深度或著色點的可見性判斷結果\"></a>5.1.2 通過不等式估計未遮擋物的平均深度或著色點的可見性判斷結果</h1><p>切比雪夫不等式（Chebychev’s inequality）刻畫了概率分佈的概率密度函數，均值和方差之間的關係，其內容如下：</p>\n<p>$$<br>P(x &gt; t) \\leq \\frac{\\sigma^2}{\\sigma^2 + (t - \\mu)^2}<br>$$</p>\n<p>將著色點 $p$ 的深度記作 $z_t$ ，則 $P(x &gt; t)$ 即是該著色點附近區域內，未被遮擋的紋元在所有紋元中所佔的比例。</p>\n<p>VSSM 直接<u>假設切比雪夫不等式中等號成立</u>：</p>\n<p>$$<br>P(z &gt; z_t) &#x3D; \\frac{(z^2)<em>{arg}-(z</em>{arg})^2}{(z^2)<em>{arg}-(z</em>{arg})^2 + (z_{t}-z_{arg})^2}<br>$$</p>\n<p>如果此時對應於 PCSS 的第三步，則便直接得到了著色點 $p$ 的最終可見性判斷結果 $V(p) &#x3D; P(z &gt; z_t)$ 。</p>\n<p>如果此時對應於 PCSS 的第一步，則繼續假設未遮擋物的平均深度等於著色點的深度 $z_{unocc} &#x3D; z_t$ ，並將著色點附近的遮擋物平均深度記作 $z_{}$ ，未遮擋物平均深度記作 ，於是存在如下關係：</p>\n<p>$$<br>[1-P(z&gt;z_t)] * z_{occ} + P(z &gt; z_t) * z_{unocc} &#x3D; z_{avg}<br>$$</p>\n<p>代入相應的數值，便可以估計出遮擋物的平均深度 $z_{occ}$ 以用於 PCSS 第二步估計半影。</p>\n<h1 id=\"6-Moment-Shadow-Mapping-MSM\"><a href=\"#6-Moment-Shadow-Mapping-MSM\" class=\"headerlink\" title=\"6 Moment Shadow Mapping (MSM)\"></a>6 Moment Shadow Mapping (MSM)</h1><p>VSSM 使用<a>切比雪夫不等式</a>估計著色點附近深度分佈的累積概率函數，進而計算該點附近未被遮擋的紋元占所有紋元的比例。此時，累計概率函數的重建僅用到了均值和  階原點矩。 Moment Shadow Mapping 在其基礎上對重建步驟作了改進，在重建累計概率函數時用到了更高階的原點矩，得到了更準確的擬合。</p>\n<p><img src=\"/project/pic/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202022-10-22%20174520.png\"></p>\n<p>因為考慮了深度的更高階項，所以消耗了更多的存放空間，重建時也消耗了更多的資源，但是的確緩解了 VSSM 生成陰影時的漏光等現象。</p>\n<p><img src=\"/project/pic/v2-3626d7cef76c1046b975e721d65d2894_r.jpg\"></p>\n<h1 id=\"7-Distance-Field-Soft-Shadows\"><a href=\"#7-Distance-Field-Soft-Shadows\" class=\"headerlink\" title=\"7 Distance Field Soft Shadows\"></a>7 Distance Field Soft Shadows</h1><p>和 PCSS 系列技術不同，distance field soft shadows 依靠有向距離場而不是陰影圖來生成軟陰影。</p>\n<p>有向距離場（signed distance field，SDF）  保存了三維場景中任一點與距離它最近的景物表面之間的距離。如果該點在景物內部，則距離是負數，否則是正數。</p>\n<p>從著色點 $p$ 發射一根指向光源的光線，在光線傳播的過程中記錄當前點 $p$ 的有向距離場數值 $sdf(p)$ 和當前點到著色點之間的距離，計算相應的角度，並記錄下光線傳播過程中最小的那個角度 $\\theta$ ，則這個角度代表了從著色點從該方向向光源望去時未被其它物體遮擋的“安全”視角。</p>\n<p><img src=\"/project/pic/v2-4bf1616f791388a1bfeae86b205afe5d_r.jpg\"></p>\n<p>這個“安全”角越小，則著色點被其它物體遮擋的程度越大，於是可以根據“安全“角的大小調整陰影的柔和程度，由此得到軟陰影。</p>\n<p>通常，”安全“角  的計算並非直接求取反三角函數，而是使用如下公式以減少計算耗費：</p>\n<p>$$<br>\\theta &#x3D; min\\big({\\frac{k * sdf(p)}{||p - o||},1}\\big)<br>$$</p>\n<p>參數 $k$ 控制了陰影邊緣的柔和程度， $k$ 越大，則陰影的邊緣則越柔和。</p>\n<p>Distance Field Soft Shadows 可以生成相對高質量的軟陰影，並且速度較快，但是還是存在走樣問題，而且有向距離場需要預計算並存儲場景中每個三維點的深度信息，和 PCSS 系列技術相比消耗了更多的存儲空間，因為後者在生成深度圖時只需要計算並存儲光源處的深度信息即可。.</p>\n<p>為了避免生成有向距離場時需要計算場景中每個三維點的信息，一些研究提出可以使用八叉樹之類的層次化數據結構細分場景。對於場景中那些遠離任何景物表面的區域，細分的層級可以粗糙一些，如此便減少了資源耗費。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li>有向距離場（Signed Distance Field）（SDF）:</li>\n<li><a href=\"https://docs.unrealengine.com/5.0/zh-CN/mesh-distance-fields-in-unreal-engine/\">虚幻引擎网格体距离场 | 虚幻引擎5.0文档 (unrealengine.com)</a></li>\n</ul>\n","feature":null,"text":"Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM1. Shadow Mapping (陰影映射)1.1 陰影映射算法流程Shadow Mapping 為圖像空間算法，用於快速判斷Shadow point 是否於陰影之中 好處: 不需要場景的...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Shadow-Mapping%E3%80%81PCSS%E3%80%81VSSM%E3%80%81SDF-Shadows%E3%80%81VSM%E3%80%81MSM\"><span class=\"toc-text\">Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Shadow-Mapping-%E9%99%B0%E5%BD%B1%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">1. Shadow Mapping (陰影映射)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E9%99%B0%E5%BD%B1%E6%98%A0%E5%B0%84%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">1.1 陰影映射算法流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E8%87%AA%E9%81%AE%E6%93%8B%E5%95%8F%E9%A1%8C\"><span class=\"toc-text\">1.2 自遮擋問題</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9A%E9%BA%BC%E6%98%AF%E8%87%AA%E9%81%AE%E6%93%8B\"><span class=\"toc-text\">甚麼是自遮擋?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B0%A1%E5%96%AE%E7%9A%84%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95-%E5%81%8F%E5%80%9A-bias\"><span class=\"toc-text\">簡單的解決方法 偏倚 bias</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E8%B5%B0%E6%A8%A3%E5%95%8F%E9%A1%8C-Aliasing\"><span class=\"toc-text\">1.3 走樣問題 Aliasing</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-PCF-Percentage-Closer-Filtering-%E5%8F%8D%E8%B5%B0%E6%A8%A3\"><span class=\"toc-text\">2.1 PCF (Percentage Closer Filtering) 反走樣</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PCF%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">PCF流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-PCF-%E5%9C%A8-GAMES202-homework-1-%E7%9A%84-%E5%AF%A6%E7%8F%BE%E9%81%8E%E7%A8%8B\"><span class=\"toc-text\">2.2 PCF 在 GAMES202 homework 1 的 實現過程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LightMVP-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">LightMVP 使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-1-Soft-Shadow\"><span class=\"toc-text\">3.1 Soft Shadow</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-1-PCSS\"><span class=\"toc-text\">4.1 PCSS</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-2-PCSS-%E5%9C%A8-GAMES202-homework-1-%E7%9A%84-%E5%AF%A6%E7%8F%BE%E9%81%8E%E7%A8%8B\"><span class=\"toc-text\">4.2 PCSS 在 GAMES202 homework 1 的 實現過程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-1-VSSM\"><span class=\"toc-text\">5.1 VSSM</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-1-1-%E8%A8%88%E7%AE%97%E6%B7%B1%E5%BA%A6%E5%88%86%E4%BD%88%E7%9A%84%E5%9D%87%E5%80%BC%E5%92%8C%E6%96%B9%E5%B7%AE\"><span class=\"toc-text\">5.1.1 計算深度分佈的均值和方差</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-1-2-%E9%80%9A%E9%81%8E%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%B0%E8%A8%88%E6%9C%AA%E9%81%AE%E6%93%8B%E7%89%A9%E7%9A%84%E5%B9%B3%E5%9D%87%E6%B7%B1%E5%BA%A6%E6%88%96%E8%91%97%E8%89%B2%E9%BB%9E%E7%9A%84%E5%8F%AF%E8%A6%8B%E6%80%A7%E5%88%A4%E6%96%B7%E7%B5%90%E6%9E%9C\"><span class=\"toc-text\">5.1.2 通過不等式估計未遮擋物的平均深度或著色點的可見性判斷結果</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-Moment-Shadow-Mapping-MSM\"><span class=\"toc-text\">6 Moment Shadow Mapping (MSM)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-Distance-Field-Soft-Shadows\"><span class=\"toc-text\">7 Distance Field Soft Shadows</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><span class=\"toc-text\">參考資料</span></a></li></ol>","author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"mapped":true,"prev_post":{"title":"實時渲染 延遲渲染 Deferred Rendering","uid":"a896efca63e04f8beb46d5e9142b43a4","slug":"GraphicQuest/GQ010 實時渲染2 延遲渲染 Deferred Rendering","date":"2022-12-15T02:51:05.862Z","updated":"2022-12-14T16:27:40.235Z","comments":true,"path":"api/articles/GraphicQuest/GQ010 實時渲染2 延遲渲染 Deferred Rendering.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1048887478377005126/ANIME-PICTURES.NET_-_694178-2439x3421-original-tiv-single-tallimage-lookingatviewer-blush.png","text":"延遲渲染 Deferred Rendering1.1 甚麼是延遲渲染？ A single rendering pass could generate a color image in one target, object identifiers in another, and w...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null},"next_post":{"title":"材質和外觀","uid":"63f08a5595b545f21f86b9f931310211","slug":"GraphicQuest/GQ007 材質和外觀","date":"2022-12-15T02:51:05.846Z","updated":"2022-12-14T14:55:41.470Z","comments":true,"path":"api/articles/GraphicQuest/GQ007 材質和外觀.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1046374073061605396/74855837_p0.png","text":"1.材質和外觀在計算機圖形學中，紋理貼圖是使用圖像、函數或其他數據源來改變物體表面外觀的技術。例如，可以將一幅磚牆的彩色圖像應用到一個多邊形上，而不用對磚牆的幾何形狀進行精確表示。當觀察這個多邊形的時候，這張彩色圖像就出現在多邊形所在位置上。只要觀察者不接近這面牆，就不會注意到其...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null}}