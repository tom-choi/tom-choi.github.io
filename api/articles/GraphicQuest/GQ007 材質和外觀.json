{"title":"材質和外觀","uid":"63f08a5595b545f21f86b9f931310211","slug":"GraphicQuest/GQ007 材質和外觀","date":"2022-12-15T02:51:05.846Z","updated":"2022-12-14T14:55:41.470Z","comments":true,"path":"api/articles/GraphicQuest/GQ007 材質和外觀.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1046374073061605396/74855837_p0.png","content":"<h1 id=\"1-材質和外觀\"><a href=\"#1-材質和外觀\" class=\"headerlink\" title=\"1.材質和外觀\"></a>1.材質和外觀</h1><p>在計算機圖形學中，紋理貼圖是使用圖像、函數或其他數據源來改變物體表面外觀的技術。例如，可以將一幅磚牆的彩色圖像應用到一個多邊形上，而不用對磚牆的幾何形狀進行精確表示。當觀察這個多邊形的時候，這張彩色圖像就出現在多邊形所在位置上。只要觀察者不接近這面牆，就不會注意到其中幾何細節的不足（比如其實磚塊和砂漿的圖像是顯示在光滑的表面上的事實）。通過這種方式將圖像和物體表面結合起來，可以在建模、存儲空間和速度方面節省很多資源</p>\n<p>大尺度繪製:</p>\n<ul>\n<li>覆蓋很多個像素</li>\n<li>由頂點，三角形，其他的幾何圖元表示</li>\n<li>例如: 角色的四肢</li>\n</ul>\n<p>中尺度(細節)繪製: (Bump Mapping 重點)</p>\n<ul>\n<li>覆蓋好幾個像素</li>\n<li>細節可能特別複雜，無法使用單個三角形渲染</li>\n<li>細節可能相對較大，可以觀察看到幾個像素以上的變化</li>\n<li>例如: 人臉的皺紋、肌肉的褶皺、磚頭的縫隙</li>\n</ul>\n<p>小尺度繪製:</p>\n<ul>\n<li>一個像素</li>\n<li>通常使用紋理貼圖作為參數</li>\n<li>模擬了物體表面微觀幾何的相互作用<br>例如:</li>\n</ul>\n<ul>\n<li>有光澤的物體表面是光滑的、漫反射的物體，在微觀下表面是粗糙的 </li>\n<li>角色的皮膚和衣服看起來也是不同的，因為使用了不同的著色模型&#x2F;不同的參數</li>\n</ul>\n<h1 id=\"2-Bump-Mapping\"><a href=\"#2-Bump-Mapping\" class=\"headerlink\" title=\"2.Bump Mapping\"></a>2.Bump Mapping</h1><p>模擬中尺度的常用方法之一，可以讓觀察者感受到比模型尺度更小的細節</p>\n<p>思路：</p>\n<ul>\n<li>在紋理中將尺度相關的信息編碼進去</li>\n<li>著色過程中，用受到干擾的表面去代替真實的表面</li>\n<li>這樣一來，表面就會有小尺度的細節<br>原理：</li>\n<li>從物體表面的貼圖進行變化然後再進行光照計算的一種技術</li>\n<li>主要的原理是通過改變表面光照方程的法線，而不是表面的幾何法線，或對每個待渲染的像素在計算照明之前都要加上一個從高度圖中找到的擾動，來模擬凹凸不平的視覺特徵</li>\n<li>例如：<ul>\n<li>給法線分量添加噪音（法線映射貼圖）</li>\n<li>在一個保存擾動值的紋理圖中進行查找（視差映射、浮雕映射貼圖）</li>\n</ul>\n</li>\n<li>是一種提升物體真實感的有效方法， 且不用提升額外的幾何復雜度（不用改模型）</li>\n</ul>\n<h1 id=\"2-1-不同的凹凸映射\"><a href=\"#2-1-不同的凹凸映射\" class=\"headerlink\" title=\"2.1 不同的凹凸映射\"></a>2.1 不同的凹凸映射</h1><ol>\n<li>Bump Mapping: 凹凸貼圖</li>\n<li>Normal Mapping: 法線貼圖</li>\n<li>Displacement Mapping: 移位貼圖</li>\n<li>Parallax Mapping (Virtual Displacement Mapping): 視差貼圖</li>\n<li>Relief Mapping (Steep Parallax Mapping): 浮雕貼圖</li>\n</ol>\n<ul>\n<li>用處非常廣泛，如增加模型的細節效果、或者做特殊的畫面表現 </li>\n<li>最常用的：<ul>\n<li>法線映射<ul>\n<li>增加法線貼圖後，會對局部的物體表面產生擾動，進而改變明暗關係，來達到增加表面細節的效果。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>很多映射都會用到法線貼圖</li>\n</ul>\n<h1 id=\"2-2-Normal-Mapping\"><a href=\"#2-2-Normal-Mapping\" class=\"headerlink\" title=\"2.2 Normal Mapping\"></a>2.2 Normal Mapping</h1><h2 id=\"2-2-1-原理\"><a href=\"#2-2-1-原理\" class=\"headerlink\" title=\"2.2.1 原理\"></a>2.2.1 原理</h2><p>法線貼圖：存有物體局部表面法線信息的一張貼圖</p>\n<ul>\n<li>使用過程：<ul>\n<li>在計算光照時，程序會去讀取法線圖，冰獲取到當前像素點的法線信息，結合光照信息進行光照計算。</li>\n</ul>\n</li>\n<li>優點：<ul>\n<li>使用法線貼圖來計算光照，可以讓物體表現出更多豐富的細節，且隨著光照方向的變化而變化，這是普通的貼圖做不到的。</li>\n</ul>\n</li>\n<li>生成：<ul>\n<li>法線貼圖一般由高模映射到對應的低模上來生成。</li>\n<li>對於金屬、木頭這類細節豐富的物體，可以藉助程序化的軟件，如PS、SD來生成</li>\n<li>opengl-tutorial教程: <a href=\"http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\">Tutorial 13 : Normal Mapping</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-2-實際使用\"><a href=\"#2-2-2-實際使用\" class=\"headerlink\" title=\"2.2.2 實際使用\"></a>2.2.2 實際使用</h2><ul>\n<li><a href=\"https://clipdrop.co/relight\">clipdrop.co&#x2F;relight</a></li>\n<li>使用了AI的方法去生成了一張法線貼圖，我們就可以使用法線貼圖做出打光的效果</li>\n</ul>\n<h2 id=\"2-2-3-存儲：切線空間\"><a href=\"#2-2-3-存儲：切線空間\" class=\"headerlink\" title=\"2.2.3 存儲：切線空間\"></a>2.2.3 存儲：切線空間</h2><p>法線的存儲，一般會放到模型的切線空間中</p>\n<ul>\n<li><p>切線空間：</p>\n<ul>\n<li>以物體表面的切線，副切線和法線組成的幾何空間</li>\n<li>每個頂點都有屬於自己的切線空間，這個空間的原點是頂點本身，z軸是頂點的法線方向（n），x軸是頂點的切線方向（t），y軸有前邊兩個軸叉乘而來，被稱為副切線（b）或者副法線。</li>\n</ul>\n<p><img src=\"/project/pic/9o9eO0Shpsg7m2GOzwx_6w.PNG\"></p>\n</li>\n<li><p>在計算光照時，需要把相關的向量放在統一的坐標系下進行運算。此時就需要不同空間坐標的轉換矩陣（世界空間轉切線空間&#x2F;切線空間轉世界空間）</p>\n</li>\n</ul>\n<h2 id=\"2-2-4-世界空間和切線空間的轉換\"><a href=\"#2-2-4-世界空間和切線空間的轉換\" class=\"headerlink\" title=\"2.2.4 世界空間和切線空間的轉換\"></a>2.2.4 世界空間和切線空間的轉換</h2><p>將世界坐標系下頂點的法線（Normal）、切線（Tangent）、副切線（Bitangent）作為切線空間坐標系的正交基。用這三個向量的標準正交基構建轉換矩陣。對應關係為：法線方向作為z軸，切線方向作為x軸，副切線方向作為y軸</p>\n<ul>\n<li>轉換矩陣：<ul>\n<li>切線空間到世界空間的轉換矩陣為一個3×3的旋轉矩陣，一般稱為TBN矩陣</li>\n<li>世界空間到切線空間的轉換矩陣為上述TBN矩陣的逆矩陣，因為是正交矩陣，所以逆矩陣就是它的轉置矩陣</li>\n<li><a href=\"https://blog.csdn.net/qq_35312463/article/details/105874855\">GLSL-TBN矩阵</a></li>\n</ul>\n</li>\n</ul>\n<p>$$<br>TBN &#x3D; \\begin{bmatrix}<br>    T_x &amp; B_x &amp; N_x \\<br>    T_y &amp; B_y &amp; N_y \\<br>    T_z &amp; B_z &amp; N_z \\<br>\\end{bmatrix}<br>$$</p>\n<p>$$<br>TBN-1 &#x3D; \\begin{bmatrix}<br>    T_x &amp; B_x &amp; N_x \\<br>    T_y &amp; B_y &amp; N_y \\<br>    T_z &amp; B_z &amp; N_z \\<br>\\end{bmatrix}^T &#x3D;<br>\\begin{bmatrix}<br>    T_x &amp; T_y &amp; T_z \\<br>    B_x &amp; B_y &amp; B_z \\<br>    N_x &amp; N_y &amp; N_z \\<br>\\end{bmatrix}<br>$$</p>\n<ul>\n<li>旋轉矩陣的逆&#x3D;旋轉矩陣的轉置 (games101 lesson 4)</li>\n<li>轉換矩陣完成之後，接下來就是光照計算<ul>\n<li>將光照計算中需要的數據，例如光照方向、觀察方向、法線方向等參數，帶入到光照模型中計算</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-5-切線空間的優點\"><a href=\"#2-2-5-切線空間的優點\" class=\"headerlink\" title=\"2.2.5 切線空間的優點\"></a>2.2.5 切線空間的優點</h2><p>法線存在各個空間裡都可以，但關鍵不只是存在哪裡，還有後續的光照計算</p>\n<ul>\n<li>切線空間的好處<ol>\n<li>自由度高。</li>\n</ol>\n<ul>\n<li>模型空間下是絕對法線信息（僅可以用在創建它時的那個模型）</li>\n<li>而切線空間下的是相對法線信息，是對當前物體法線的擾動。 （可以復用）</li>\n</ul>\n<ol start=\"2\">\n<li>可進行uv動畫。</li>\n</ol>\n<ul>\n<li>比如：移動uv坐標來實現凹凸移動效果</li>\n</ul>\n<ol start=\"3\">\n<li>可以重用法線紋理。</li>\n</ol>\n<ul>\n<li>比如：一個立方體，6個面可以用一張法線貼圖</li>\n</ul>\n<ol start=\"4\">\n<li>可壓縮。</li>\n</ol>\n<ul>\n<li>由於切線空間下貼圖中法線的Z方向總是正方向（模型空間下可以是負的），那麼我們只存XY（切線和副切線）就能推出Z（法線）了，可以少存一個。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-6-法線貼圖在Unity中的壓縮格式\"><a href=\"#2-2-6-法線貼圖在Unity中的壓縮格式\" class=\"headerlink\" title=\"2.2.6 法線貼圖在Unity中的壓縮格式\"></a>2.2.6 法線貼圖在Unity中的壓縮格式</h2><p>在非移動平台上，會把法線貼圖轉化為DXRT5nm格式</p>\n<ul>\n<li>這個格式只有兩個有效GA通道（就是上邊說的只存xy，推出z） ，分別對應法線的y、x分量可以節省空間。</li>\n<li>在UnityCG.cginc中，提供了UnpackNormal()函數，可以解碼法線貼圖，它是對法線紋理的採樣結果的一個反映射操作，其對應的法線紋理需要設置為Normal map的格式，才能使用該函數，如下是函數的原型：<pre class=\"line-numbers language-shaderlab\" data-language=\"shaderlab\"><code class=\"language-shaderlab\">&#x2F;&#x2F; Unpack normal as DXT5nm (1, y, 1, x) or BC5 (x, y, 0, 1)\n&#x2F;&#x2F; Note neutral texture like &quot;bump&quot; is (0, 0, 1, 1) to work with both plain RGB normal and DXT5nm&#x2F;BC5\nfixed3 UnpackNormalmapRGorAG(fixed4 packednormal)\n&#123;\n    &#x2F;&#x2F; This do the trick\n  packednormal.x *&#x3D; packednormal.w;\n\n  fixed3 normal;\n  &#x2F;&#x2F;法線分量範圍[-1,1]映射成像素[0,1]   Normal&#x3D;pixel*2-1\n  normal.xy &#x3D; packednormal.xy * 2 - 1; \n  &#x2F;&#x2F;用xy分量求出z分量 根號下1-x²*y²&#x3D;z\n  normal.z &#x3D; sqrt(1 - saturate(dot(normal.xy, normal.xy)));\n  return normal;\n&#125;\ninline fixed3 UnpackNormal(fixed4 packednormal)\n&#123;\n#if defined(UNITY_NO_DXT5nm)\n    return packednormal.xyz * 2 - 1;\n#else\n    return UnpackNormalmapRGorAG(packednormal);\n#endif\n&#125;</code></pre></li>\n<li>在移動平台上，使用傳統RGB通道。<pre class=\"line-numbers language-none\"><code class=\"language-none\">inline fixed3 UnpackNormal(fixed4 packednormal)\n&#123;\n#if defined(SHADER_API_GLES)  defined(SHADER_API_MOBILE)\n    return packednormal.xyz * 2 - 1;&#x2F;&#x2F;原理同上\n#else\n    fixed3 normal;\n    normal.xy &#x3D; packednormal.wy * 2 - 1;\n    normal.z &#x3D; sqrt(1 - normal.x*normal.x - normal.y * normal.y);\n    return normal;\n#endif\n&#125;</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">normal.xy &#x3D; packednormal.xy * 2 - 1; </code></pre></li>\n<li>關於解碼法線貼圖時要做一個“*2-1”的操作<ol>\n<li>法線紋理中存的就是表面法線，由於法線分量範圍為[-1,1]，像素的分量範圍為[0,1] </li>\n<li>因此我們通常需要做一個映射：pixel&#x3D;（normal+1）&#x2F;2，解碼時就要做一個反向的操作</li>\n</ol>\n</li>\n<li>關於 normal.xy *&#x3D; scale；<ol>\n<li>對法線的擾動效果進行縮放</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"2-3-Parallax-Mapping\"><a href=\"#2-3-Parallax-Mapping\" class=\"headerlink\" title=\"2.3 Parallax Mapping\"></a>2.3 Parallax Mapping</h1><h2 id=\"2-3-1-原理\"><a href=\"#2-3-1-原理\" class=\"headerlink\" title=\"2.3.1 原理\"></a>2.3.1 原理</h2><ul>\n<li>視差貼圖Parallax Mapping，又稱為 Offset Mapping，以及virtual displacement mapping)，於2001年由Kaneko引入，由Welsh進行了改進和推廣</li>\n<li>主要為了賦予模型表面遮擋關係的細節。引入了一張高度圖</li>\n<li>可以和法線貼圖一起使用，來產生一些真實的效果</li>\n<li>高度圖一般視為頂點位移來使用，此時需要三角形足夠多，模型足夠精細，否則看起來會有塊狀</li>\n<li>如果在有限的三角形面的情況下，怎麼辦？這就用到了視差映射技術</li>\n<li>視差映射技術：<ul>\n<li>核心：改變紋理坐標</li>\n<li>需要一張存儲模型信息的高度圖，利用模型表面高度信息來對紋理進行偏移（例如：低位置的信息被高位置的信息遮擋掉了，所以會採樣更高的信息）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-3-2-實際使用\"><a href=\"#2-3-2-實際使用\" class=\"headerlink\" title=\"2.3.2 實際使用\"></a>2.3.2 實際使用</h2><p>詳見參考資料</p>\n<h2 id=\"2-3-3-視差映射的實現\"><a href=\"#2-3-3-視差映射的實現\" class=\"headerlink\" title=\"2.3.3 視差映射的實現\"></a>2.3.3 視差映射的實現</h2><ul>\n<li>和法線貼圖一樣，是欺騙眼睛的做法（只改變紋路，不增加三角形）</li>\n<li>我們的模型在切線空間下，所有的點都位於切線和副切線組成的平面內（圖中0.0點），但實際上物體要有更豐富的細節。<ul>\n<li>例如圖中的情況</li>\n<li>如果不使用視差貼圖，要計算當前視角下，片元A點（黃色）的信息，就是圖中的Ha</li>\n<li>實際使用視差貼圖時，真實的情況應該是視線和A點延長線和物體的交點，也就是B點，相應的就是Hb</li>\n</ul>\n</li>\n</ul>\n<p>視差映射的具體算法：如何在知道A的uv值的情況下，算出B的uv值</p>\n<ul>\n<li><p>知道AB兩者的偏移量即可</p>\n</li>\n<li><p>偏移量的獲得：用近似的方法去求解\t</p>\n<ul>\n<li>首先拿A的高度信息進行採樣，得到物體表面距離水平面（0.0）的深度值Ha。</li>\n<li>用深度值Ha和視線的三角關係算出物體上等比的偏移方向，算出近似的B點（可以看到圖中近似點B和實際點B還是有挺大差距的，所以模擬度比較低）</li>\n</ul>\n<p><img src=\"/project/pic/%E8%A6%96%E5%B7%AE%E6%98%A0%E5%B0%84.png\"></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">float2 ParallaxMapping(float2 texCoords,float3 viewDir)\n&#123; \n    float height &#x3D; texture(depthMap, texCoords).r;    \n    float2 p &#x3D; viewDir.xy &#x2F; viewDir.z * (height * height_scale);\n    return texCoords - p;  &#x2F;&#x2F;uv减偏移值\n    &#x2F;&#x2F;\n    &#x2F;&#x2F; i.uv.xy +&#x3D; offuv;\n    &#x2F;&#x2F; i.uv.zw +&#x3D; offuv;\n&#125;</code></pre>\n<p>得到偏移之後B點的uv，再去對法線貼圖進行採樣、計算時，就不會採樣A點了，而是B點</p>\n<h1 id=\"2-4-Steep-Parallax-Mapping-陡視差映射\"><a href=\"#2-4-Steep-Parallax-Mapping-陡視差映射\" class=\"headerlink\" title=\"2.4 Steep Parallax Mapping (陡視差映射)\"></a>2.4 Steep Parallax Mapping (陡視差映射)</h1><h2 id=\"2-4-1-原理\"><a href=\"#2-4-1-原理\" class=\"headerlink\" title=\"2.4.1 原理\"></a>2.4.1 原理</h2><ul>\n<li>陡峭視差映射，不像簡單的視差映射近似，並不只是簡單粗暴的對紋理坐標進行偏移而不檢查合理性和關聯性，會檢查結果是否接近於正確值。這種方法的核心思想是把表面的深度切分成等距的若干層。然後從最頂端的一層開始採樣高度圖，每一次會沿著V的方向偏移紋理坐標。如果點已經低於了表面（當前的層的深度大於採樣出的深度），停止檢查並且使用最後一次採樣的紋理坐標作為結果。</li>\n<li>將物體表面分為若干層，從最頂端開始採樣，每次沿著視角方向偏移一定的值</li>\n<li>如果當前採樣的層數，大於實際採樣的層數，就停止採樣。<ul>\n<li>例如圖中D點，採樣到0.75層，實際是0.5層，就停止採樣，返回偏移坐標</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/project/pic/steepParallaxMapping.png\"></p>\n<p>陡視差映射的算法：（計算偏移點的過程）</p>\n<ul>\n<li>首先對A點採樣，得到深度大約為0.8的位置，而其對應視線深度為0.0，不符合，繼續採樣</li>\n<li>採樣B點，深度為1，視線深度為0.25，不符合，繼續採樣</li>\n<li>採樣C點，深度大約為0.8，視線深度為0.5，不符合，繼續採樣</li>\n<li>採樣D點，採樣深度為0.5，視線深度約為0.75，符合上述的條件，認為是比較合理的一個偏移點，就返回結果（return）</li>\n</ul>\n<p>Steep Parallax Mapping 的問題：</p>\n<ul>\n<li>在於分層機制，如果<ul>\n<li>分層多，性能開銷就會大；</li>\n<li>分層小，渲染鋸齒就比較明顯。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>一種做法：可以根據視角v和法線n的角度限定採樣層數</li>\n</ul>\n<ul>\n<li>鋸齒問題會在浮雕貼圖上做改善</li>\n</ul>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">&#x2F;&#x2F;&quot;陡峭视差贴图&quot;\nvec2 steepParallaxMapping(vec2 uv, vec3 viewDir) \n&#123;\n\tfloat layerDepth &#x3D; 1.0 &#x2F; ubo.numLayers;\n\tfloat currLayerDepth &#x3D; 0.0;\n\tvec2 deltaUV &#x3D; viewDir.xy * ubo.heightScale &#x2F; (viewDir.z * ubo.numLayers);\n\tvec2 currUV &#x3D; uv;\n\tfloat height &#x3D; 1.0 - textureLod(sNormalHeightMap, currUV, 0.0).a;\n\tfor (int i &#x3D; 0; i &lt; ubo.numLayers; i++) &#123;\n\t\tcurrLayerDepth +&#x3D; layerDepth;\n\t\tcurrUV -&#x3D; deltaUV;\n\t\theight &#x3D; 1.0 - textureLod(sNormalHeightMap, currUV, 0.0).a;\n\t\tif (height &lt; currLayerDepth) &#123;\n\t\t\tbreak;\n\t\t&#125;\n\t&#125;\n\treturn currUV;\n&#125;</code></pre>\n\n<h1 id=\"2-5-Relief-Mapping-浮雕映射\"><a href=\"#2-5-Relief-Mapping-浮雕映射\" class=\"headerlink\" title=\"2.5 Relief Mapping (浮雕映射)\"></a>2.5 Relief Mapping (浮雕映射)</h1><h2 id=\"2-5-1-原理\"><a href=\"#2-5-1-原理\" class=\"headerlink\" title=\"2.5.1 原理\"></a>2.5.1 原理</h2><ul>\n<li>可以更精確的計算uv偏移量(視差如果偏移量大的話就會失真)、提供更多的深度、還可以做自陰影以及閉塞效果</li>\n<li>例如下圖：可以看到浮雕的凹凸深度明顯更大，且凹凸有自陰影效果</li>\n<li>浮雕映射一般用射線步進和二分查找來決定uv偏移量<ul>\n<li>第一步：射線步進部分，和視差貼圖一樣<br>— 第二步：二分查找部分：通過射線步進找到合適的步進後，在此步進內使用二分查找來找到精確的偏移值</li>\n</ul>\n</li>\n<li>為什麼不直接使用二分查找？<ul>\n<li>會產生比較大的誤差</li>\n<li>下圖為例<ul>\n<li>如果直接使用二分查找，在深度0和1的中間的1點，進一步為2點 -&gt; 3點 -&gt;Q點。但我們要的結果是P點，可以看到結果很明顯是錯誤的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/project/pic/Relief%20Mapping.png\"></p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">&#x2F;&#x2F;浮雕贴图\nfloat2 ReliefMapping(float2 uv, real3 viewDirTS)\n&#123;\n    float2 offlayerUV &#x3D; viewDirTS.xy &#x2F; viewDirTS.z * _HeightScale;\n    float RayNumber &#x3D; 20;\n    float layerHeight &#x3D; 1.0 &#x2F; RayNumber;\n    float2 SteppingUV &#x3D; offlayerUV &#x2F; RayNumber;\n    float offlayerUVL &#x3D; length(offlayerUV);\n    float currentLayerHeight &#x3D; 0;\n    \n    float2 offuv&#x3D; float2(0,0);\n    for (int i &#x3D; 0; i &lt; RayNumber; i++)\n    &#123;\n        offuv +&#x3D; SteppingUV;\n\n        float currentHeight &#x3D; tex2D(_HeightMap, uv + offuv).r;\n        currentLayerHeight +&#x3D; layerHeight;\n        if (currentHeight &lt; currentLayerHeight)\n        &#123;\n            break;\n        &#125;\n    &#125;\n\n    float2 T0 &#x3D; uv-SteppingUV, T1 &#x3D; uv + offuv;\n\n    for (int j &#x3D; 0;j&lt;20;j++)\n    &#123;\n        float2 P0 &#x3D; (T0 + T1) &#x2F; 2;\n\n        float P0Height &#x3D; tex2D(_HeightMap, P0).r;\n\n        float P0LayerHeight &#x3D; length(P0) &#x2F; offlayerUVL;\n\n        if (P0Height &lt; P0LayerHeight)\n        &#123;\n            T0 &#x3D; P0;\n\n        &#125;\n        else\n        &#123;\n            T1&#x3D; P0;\n        &#125;\n\n    &#125;\n\n    return (T0 + T1) &#x2F; 2 - uv;\n&#125;</code></pre>\n\n<h1 id=\"視差閉塞貼圖（POM-x3D-Parallax-Occlusion-Mapping）\"><a href=\"#視差閉塞貼圖（POM-x3D-Parallax-Occlusion-Mapping）\" class=\"headerlink\" title=\"視差閉塞貼圖（POM &#x3D; Parallax Occlusion Mapping）\"></a>視差閉塞貼圖（POM &#x3D; Parallax Occlusion Mapping）</h1><ul>\n<li>視差閉塞貼圖是陡峭視差映射的另一個改進版本。</li>\n<li>相對於浮雕貼圖，不同之處在於最後一步<ul>\n<li>浮雕貼圖是在確認最後步進之後進行二分查找（在迭代次數比較多的情況下，還是挺耗的）</li>\n<li>視差閉塞貼圖是在最後步進的兩端uv值進行採樣（下圖紅色箭頭），採樣之後再對這兩個結果進行插值，插值的結果作為P點最終的偏移值</li>\n<li>視差遮蔽映射可以使用相對較少的採樣次數產生很好的結果。但視差遮蔽映射比浮雕視差映射更容易跳過高度圖中的小細節，也更容易在高度圖數據產生大幅度的變化時得到錯誤的結果。</li>\n</ul>\n</li>\n<li>優點：<ul>\n<li>相對於浮雕映射，性能更好（最後只做插值，而浮雕要做二分查找）</li>\n<li>相對於陡視差貼圖，精確性更好</li>\n</ul>\n</li>\n<li>要求：<ul>\n<li>因為最後要做插值，所以要求表面是相對比較平滑&#x2F;連續的，如果有莫名的凸起結果可能會出錯</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/project/pic/POM.png\"></p>\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">&#x2F;&#x2F;&quot;视差遮蔽贴图&quot;\nvec2 parallaxOcclusionMapping(vec2 uv, vec3 viewDir) \n&#123;\n\tfloat layerDepth &#x3D; 1.0 &#x2F; ubo.numLayers;\n\tfloat currLayerDepth &#x3D; 0.0;\n\tvec2 deltaUV &#x3D; viewDir.xy * ubo.heightScale &#x2F; (viewDir.z * ubo.numLayers);\n\tvec2 currUV &#x3D; uv;\n\tfloat height &#x3D; 1.0 - textureLod(sNormalHeightMap, currUV, 0.0).a;\n\tfor (int i &#x3D; 0; i &lt; ubo.numLayers; i++) &#123;\n\t\tcurrLayerDepth +&#x3D; layerDepth;\n\t\tcurrUV -&#x3D; deltaUV;\n\t\theight &#x3D; 1.0 - textureLod(sNormalHeightMap, currUV, 0.0).a;\n\t\tif (height &lt; currLayerDepth) &#123;\n\t\t\tbreak;\n\t\t&#125;\n\t&#125;\n\tvec2 prevUV &#x3D; currUV + deltaUV;\n\tfloat nextDepth &#x3D; height - currLayerDepth;\n\tfloat prevDepth &#x3D; 1.0 - textureLod(sNormalHeightMap, prevUV, 0.0).a - currLayerDepth + layerDepth;\n\treturn mix(currUV, prevUV, nextDepth &#x2F; (nextDepth - prevDepth));\n&#125;</code></pre>\n\n<h1 id=\"課後作業\"><a href=\"#課後作業\" class=\"headerlink\" title=\"課後作業\"></a>課後作業</h1><ol>\n<li>嘗試使用Shaderlab還原法線映射、視差映射、浮雕映射吧</li>\n<li>除了以上的Mapping，還有別的Mapping嗎? (提高!)</li>\n<li>閱讀此<a href=\"https://blog.csdn.net/leelizc/article/details/78609282\">文章</a>，嘗試自己在UE或者Unity引擎中製作冰塊效果吧</li>\n</ol>\n<h1 id=\"提高內容\"><a href=\"#提高內容\" class=\"headerlink\" title=\"提高內容\"></a>提高內容</h1><ol>\n<li>材質和BRDF</li>\n<li>更好的光線傳播</li>\n<li>非表面模型</li>\n<li>表面模型</li>\n<li>細節模型</li>\n</ol>\n<details>\n\n<h1 id=\"材質和BRDF\"><a href=\"#材質和BRDF\" class=\"headerlink\" title=\"材質和BRDF\"></a>材質和BRDF</h1><h1 id=\"更好的光線傳播\"><a href=\"#更好的光線傳播\" class=\"headerlink\" title=\"更好的光線傳播\"></a>更好的光線傳播</h1><h1 id=\"非表面模型\"><a href=\"#非表面模型\" class=\"headerlink\" title=\"非表面模型\"></a>非表面模型</h1><h1 id=\"表面模型\"><a href=\"#表面模型\" class=\"headerlink\" title=\"表面模型\"></a>表面模型</h1><h1 id=\"細節模型\"><a href=\"#細節模型\" class=\"headerlink\" title=\"細節模型\"></a>細節模型</h1></details>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_35312463/article/details/106980557\">Vulkan_法线映射、视差映射、陡视差映射和视差遮挡映射</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cM7RjEtZGHw&ab_channel=CemYuksel\">Interactive Graphics 19 - Bump, Normal, Displacement, and Parallax Mapping</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/574281493\">UnityShader 基础（54）表面内部空间映射（InteriorMapping）1基础</a><ul>\n<li>InteriorMapping 和 Parallax Mapping 不太一樣，可以寫一次試試看</li>\n</ul>\n</li>\n<li><a href=\"https://www.bilibili.com/video/BV1Lb411N7xu/?vd_source=c8f797eb0ed2b9ae031c806a2b48a232\">【展示】Unity3D瞳孔渲染效果展示</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27551369\">《Real-Time Rendering 3rd》 提炼总结(五) 第六章 · 纹理贴图及相关技-毛星云</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/150949320\">UE4材质视差算法</a></li>\n<li><a href=\"https://realtimevfx.com/t/shaders-gwent-parallax-card-mockup-sketch/15117\">“Shaders” Gwent Parallax Card Mockup Sketch</a></li>\n</ul>\n","feature":null,"text":"1.材質和外觀在計算機圖形學中，紋理貼圖是使用圖像、函數或其他數據源來改變物體表面外觀的技術。例如，可以將一幅磚牆的彩色圖像應用到一個多邊形上，而不用對磚牆的幾何形狀進行精確表示。當觀察這個多邊形的時候，這張彩色圖像就出現在多邊形所在位置上。只要觀察者不接近這面牆，就不會注意到其...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%9D%90%E8%B3%AA%E5%92%8C%E5%A4%96%E8%A7%80\"><span class=\"toc-text\">1.材質和外觀</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Bump-Mapping\"><span class=\"toc-text\">2.Bump Mapping</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-1-%E4%B8%8D%E5%90%8C%E7%9A%84%E5%87%B9%E5%87%B8%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">2.1 不同的凹凸映射</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-2-Normal-Mapping\"><span class=\"toc-text\">2.2 Normal Mapping</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.2.1 原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-2-%E5%AF%A6%E9%9A%9B%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.2.2 實際使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-3-%E5%AD%98%E5%84%B2%EF%BC%9A%E5%88%87%E7%B7%9A%E7%A9%BA%E9%96%93\"><span class=\"toc-text\">2.2.3 存儲：切線空間</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-4-%E4%B8%96%E7%95%8C%E7%A9%BA%E9%96%93%E5%92%8C%E5%88%87%E7%B7%9A%E7%A9%BA%E9%96%93%E7%9A%84%E8%BD%89%E6%8F%9B\"><span class=\"toc-text\">2.2.4 世界空間和切線空間的轉換</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-5-%E5%88%87%E7%B7%9A%E7%A9%BA%E9%96%93%E7%9A%84%E5%84%AA%E9%BB%9E\"><span class=\"toc-text\">2.2.5 切線空間的優點</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-6-%E6%B3%95%E7%B7%9A%E8%B2%BC%E5%9C%96%E5%9C%A8Unity%E4%B8%AD%E7%9A%84%E5%A3%93%E7%B8%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2.2.6 法線貼圖在Unity中的壓縮格式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-3-Parallax-Mapping\"><span class=\"toc-text\">2.3 Parallax Mapping</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.3.1 原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-2-%E5%AF%A6%E9%9A%9B%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.3.2 實際使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-3-%E8%A6%96%E5%B7%AE%E6%98%A0%E5%B0%84%E7%9A%84%E5%AF%A6%E7%8F%BE\"><span class=\"toc-text\">2.3.3 視差映射的實現</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-4-Steep-Parallax-Mapping-%E9%99%A1%E8%A6%96%E5%B7%AE%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">2.4 Steep Parallax Mapping (陡視差映射)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.4.1 原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-5-Relief-Mapping-%E6%B5%AE%E9%9B%95%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">2.5 Relief Mapping (浮雕映射)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-1-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.5.1 原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A6%96%E5%B7%AE%E9%96%89%E5%A1%9E%E8%B2%BC%E5%9C%96%EF%BC%88POM-x3D-Parallax-Occlusion-Mapping%EF%BC%89\"><span class=\"toc-text\">視差閉塞貼圖（POM &#x3D; Parallax Occlusion Mapping）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AA%B2%E5%BE%8C%E4%BD%9C%E6%A5%AD\"><span class=\"toc-text\">課後作業</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8F%90%E9%AB%98%E5%85%A7%E5%AE%B9\"><span class=\"toc-text\">提高內容</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9D%90%E8%B3%AA%E5%92%8CBRDF\"><span class=\"toc-text\">材質和BRDF</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%85%89%E7%B7%9A%E5%82%B3%E6%92%AD\"><span class=\"toc-text\">更好的光線傳播</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E8%A1%A8%E9%9D%A2%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">非表面模型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E9%9D%A2%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">表面模型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%B0%E7%AF%80%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">細節模型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><span class=\"toc-text\">參考資料</span></a></li></ol>","author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"mapped":true,"prev_post":{"title":"實時渲染 Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM","uid":"93a53427e5b87ad502fcef83077b7809","slug":"GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows","date":"2022-12-15T02:51:05.856Z","updated":"2022-12-14T14:55:11.082Z","comments":true,"path":"api/articles/GraphicQuest/GQ009 實時渲染1_Shadow Mapping、PCSS、VSSM、SDF Shadows.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1048640713115566141/FSeCV_LVcAEZNRM.jpg","text":"Shadow Mapping、PCSS、VSSM、SDF Shadows、VSM、MSM1. Shadow Mapping (陰影映射)1.1 陰影映射算法流程Shadow Mapping 為圖像空間算法，用於快速判斷Shadow point 是否於陰影之中 好處: 不需要場景的...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null},"next_post":{"title":"LDR和HDR","uid":"fad4f0ed74e380a79d525b4843f7354d","slug":"GraphicQuest/GQ006 LDR和HDR","date":"2022-12-15T02:51:05.841Z","updated":"2022-12-14T14:56:12.082Z","comments":true,"path":"api/articles/GraphicQuest/GQ006 LDR和HDR.json","keywords":null,"cover":"https://cdn.discordapp.com/attachments/1032335453988335676/1046000361409880074/unknown.png","text":"LDR和HDRDR: Dynamic Range 最高的亮度和最低的亮度的比值 LDR: Low Dynamic Range HDR: High Dynamic Range LDR 8位精度 (0~255) 單通道0-1 格式: PNG, JPG 應用: 色板，圖片，電腦屏幕 H...","link":"","photos":[],"count_time":{"symbolsCount":379,"symbolsTime":"1 mins."},"categories":[{"name":"遊戲開發筆記","slug":"遊戲開發筆記","count":15,"path":"api/categories/遊戲開發筆記.json"}],"tags":[{"name":"Computer Graphic","slug":"Computer-Graphic","count":15,"path":"api/tags/Computer-Graphic.json"}],"author":{"name":"tom_ci","slug":"blog-author","avatar":"https://cdn.discordapp.com/attachments/894788659356794880/1052779378314059846/AOh14GhDhRBs5Io0sk5AfsOAZLWzpaTSlQQbTaye9fiGhQs432-p-rw-no.png","link":"/","description":"tom_ci，也可以叫我CI，tom，ic，湯姆希艾或者是湯姆，艾希，Macau SMP現任群主。","socials":{"github":"https://github.com/tom-choi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/Ua2njAfQCN"}}}},"feature":null}}